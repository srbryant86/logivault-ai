{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL;\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport async function submitPromptToClaude(promptText, retries = 3, delay = 1000) {\n  let lastError;\n  for (let attempt = 1; attempt <= retries; attempt++) {\n    try {\n      const response = await fetch(`${API_URL}/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${process.env.REACT_APP_CLAUDE_KEY}`\n        },\n        body: JSON.stringify({\n          prompt: promptText\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Claude API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (err) {\n      lastError = err;\n      console.warn(`[Claude Retry ${attempt}/${retries}]`, err.message);\n      await sleep(delay * attempt); // Exponential backoff\n    }\n  }\n  throw lastError;\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","sleep","ms","Promise","resolve","setTimeout","submitPromptToClaude","promptText","retries","delay","lastError","attempt","response","fetch","method","headers","Authorization","REACT_APP_CLAUDE_KEY","body","JSON","stringify","prompt","ok","Error","status","json","err","console","warn","message"],"sources":["C:/Users/srbry/logivault-ai/frontend/src/services/api.js"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL;\r\n\r\nasync function sleep(ms) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport async function submitPromptToClaude(promptText, retries = 3, delay = 1000) {\r\n  let lastError;\r\n\r\n  for (let attempt = 1; attempt <= retries; attempt++) {\r\n    try {\r\n      const response = await fetch(`${API_URL}/generate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${process.env.REACT_APP_CLAUDE_KEY}`,\r\n        },\r\n        body: JSON.stringify({ prompt: promptText }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Claude API Error: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (err) {\r\n      lastError = err;\r\n      console.warn(`[Claude Retry ${attempt}/${retries}]`, err.message);\r\n      await sleep(delay * attempt); // Exponential backoff\r\n    }\r\n  }\r\n\r\n  throw lastError;\r\n}"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,eAAeC,KAAKA,CAACC,EAAE,EAAE;EACvB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAC1D;AAEA,OAAO,eAAeI,oBAAoBA,CAACC,UAAU,EAAEC,OAAO,GAAG,CAAC,EAAEC,KAAK,GAAG,IAAI,EAAE;EAChF,IAAIC,SAAS;EAEb,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIH,OAAO,EAAEG,OAAO,EAAE,EAAE;IACnD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,OAAO,WAAW,EAAE;QAClDiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,UAAUlB,OAAO,CAACC,GAAG,CAACkB,oBAAoB;QAC3D,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAEd;QAAW,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqBX,QAAQ,CAACY,MAAM,EAAE,CAAC;MACzD;MAEA,OAAO,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZhB,SAAS,GAAGgB,GAAG;MACfC,OAAO,CAACC,IAAI,CAAC,iBAAiBjB,OAAO,IAAIH,OAAO,GAAG,EAAEkB,GAAG,CAACG,OAAO,CAAC;MACjE,MAAM5B,KAAK,CAACQ,KAAK,GAAGE,OAAO,CAAC,CAAC,CAAC;IAChC;EACF;EAEA,MAAMD,SAAS;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}